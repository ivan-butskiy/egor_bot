from aiogram import Router, F
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.utils import markdown

from src.app.infrastructure.tg.client import find_user
from src.app.entrypoints.tg.handlers import keyboards as base_kbs
from src.app.entrypoints.tg.utils import auth_decorator
from src.users import views
from src.users.bootstrap import bootstrap
from src.users.entrypoints.tg import commands as users_cmd
from src.users.domain.commands import CreateUserCommand
from src.users.domain.model import User, UserTypeEnum
from src.users.entrypoints.tg.handlers.states import CreateUserState


router = Router(name=__name__)


@router.message(F.text == users_cmd.UsersCommand.create_user)
@router.message(CreateUserState.create_user_approve, F.text == '–ù–∞–∑–∞–¥ ‚¨Ö')
async def handle_create_user(message: types.Message, state: FSMContext):
    text = markdown.text(
        '–í–≤–µ–¥—ñ—Ç—å –Ω—ñ–∫–Ω–µ–π–º Telegram, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ +380********* –∞–±–æ –∂ –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º. '
        '–Ø–∫—â–æ –≤–∏ –±–∞–∂–∞—î—Ç–µ –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É, –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤—ñ–Ω —î –≤ –≤–∞—à–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö.'
    )

    await state.set_state(CreateUserState.create_user_contact)
    await message.answer(text=text, reply_markup=types.ReplyKeyboardRemove())


@router.message(CreateUserState.create_user_contact)
async def handle_contact(message: types.Message, state: FSMContext):
    entity: types.Contact | types.User

    if message.contact:
        tg_id = message.contact.user_id
        entity = message.contact
    elif entity := await find_user(message.text):
        tg_id = entity.id
    else:
        return await message.answer(text='–ù–∞–∂–∞–ª—å, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ –π–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç.')

    if await views.get_user(bootstrap.uow, tg_id):
        return await message.answer(text='–î–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –±–æ—Ç–∞.')

    await state.update_data({
        CreateUserState.create_user_contact: tg_id,
        CreateUserState.create_user_first_name: entity.first_name,
        CreateUserState.create_user_last_name: entity.last_name,
    })

    await state.set_state(CreateUserState.create_user_approve)

    text = markdown.text(
        markdown.text('–ó–Ω–∞–π–¥–µ–Ω–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:'),
        markdown.text(f"–Ü–º'—è - {entity.first_name}"),
        markdown.text(f"–ü—Ä—ñ–∑–≤–∏—â–µ - {entity.last_name or ''}\n"),
        markdown.text(f"–Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –≤–∏ –∑–º–æ–∂–µ—Ç–µ –∑–≥–æ–¥–æ–º –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏. "
                      f"–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."),
        sep='\n'
    )

    await message.answer(
        text=text,
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text='–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ ‚úÖ')],
                      [types.KeyboardButton(text='–ù–∞–∑–∞–¥ ‚¨Ö')]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )


@router.message(CreateUserState.create_user_approve, F.text == '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ ‚úÖ')
@auth_decorator
async def handle_approve(message: types.Message, state: FSMContext, user: User):
    data: dict = await state.get_data()
    cmd = CreateUserCommand(
        tg_id=data[CreateUserState.create_user_contact],
        first_name=data[CreateUserState.create_user_first_name],
        last_name=data[CreateUserState.create_user_last_name],
        type=UserTypeEnum.manager
    )
    await state.clear()
    await bootstrap.handle(cmd)
    await message.answer(
        text='–î–æ–¥–∞–Ω–æ! üéâ',
        reply_markup=base_kbs.get_start_kb(user)
    )
