from aiogram import Router, F
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.utils import markdown

from src.app.infrastructure.tg.client import find_user
from src.app.entrypoints.tg.utils import auth_decorator
from src.app.entrypoints.tg.handlers import keyboards as base_kbs, callbacks as base_cbs
from src.users import User
from src.suppliers import views
from src.suppliers.bootstrap import bootstrap
from src.suppliers.entrypoints.tg import commands as suppliers_cmd
from .states import CreateSupplierState


router = Router(name=__name__)


async def _handle_create_supplier(message: types.Message, state: FSMContext) -> None:
    text = markdown.text(
        markdown.hbold('–ö—Ä–æ–∫ 1/4'),
        markdown.text(
            '\n–í–≤–µ–¥—ñ—Ç—å –Ω—ñ–∫–Ω–µ–π–º Telegram, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ +380********* –∞–±–æ –∂ –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º. '
            '–Ø–∫—â–æ –≤–∏ –±–∞–∂–∞—î—Ç–µ –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É, –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤—ñ–Ω —î –≤ –≤–∞—à–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö.'
        ),
        sep='\n'
    )

    await state.set_state(CreateSupplierState.contact)
    await message.answer(text=text, reply_markup=types.ReplyKeyboardRemove())


async def _handle_title(message: types.Message, state: FSMContext):
    text = markdown.text(
        markdown.hbold('–ö—Ä–æ–∫ 3/4'),
        markdown.text('\n–í–≤–µ–¥—ñ—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –ø—Å–µ–≤–¥–æ–Ω—ñ–º, –∫–æ—Ç—Ä–∏–π –±—É–¥—É—Ç—å –±–∞—á–∏—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∏:'),
        sep='\n'
    )

    if not await views.check_supplier_title(bootstrap.uow, message.text):
        return await message.answer(text='–ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω—É –Ω–∞–∑–≤—É.')

    await state.set_state(CreateSupplierState.alias)
    await message.answer(text=text, reply_markup=base_kbs.get_inline_nav_keyboard('supplier'))


async def _handle_alias(message: types.Message, state: FSMContext):
    if not await views.check_supplier_alias(bootstrap.uow, message.text):
        return await message.answer(
            text='–ü–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫ –∑ —Ç–∞–∫–∏–º –ø—Å–µ–≤–¥–æ–Ω—ñ–º–æ–º –≤–∂–µ —ñ—Å–Ω—É—î. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –ø—Å–µ–≤–¥–æ–Ω—ñ–º.'
        )

    await state.update_data(alias=message.text)

    data = await state.get_data()
    text = markdown.text(
        markdown.hbold('–ö—Ä–æ–∫ 4/4'),
        markdown.text('\n–ë—É–¥–µ –¥–æ–¥–∞–Ω–∏–π –Ω–∞—Å—Ç—É–ø–Ω–∏–π –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫:\n'),
        markdown.text(markdown.hbold(f'–ù–∞–∑–≤–∞: '), data['title']),
        markdown.text(markdown.hbold(f'–ü—Å–µ–≤–¥–æ–Ω—ñ–º: '), data['alias']),
        markdown.text('\n–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.'),
        sep='\n'
    )

    await state.set_state(CreateSupplierState.approve)
    await message.answer(
        text=text,
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text='–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ ‚úÖ')],
                      [types.KeyboardButton(text='–ù–∞–∑–∞–¥ ‚¨Ö')]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )


async def _handle_approve(message: types.Message, state: FSMContext, user: User):
    await state.update_data(alias=message.text)
    await message.answer(
        text='–î–æ–¥–∞–Ω–æ! üéâ',
        reply_markup=base_kbs.get_start_kb(user)
    )
    await state.clear()


async def _handle_contact_answer(message: types.Message, state: FSMContext):
    text = markdown.text(
        markdown.hbold('–ö—Ä–æ–∫ 2/4'),
        markdown.text('\n–í–≤–µ–¥—ñ—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω—É –Ω–∞–∑–≤—É, –∫–æ—Ç—Ä—É –±—É–¥–µ –±–∞—á–∏—Ç–∏ –ª–∏—à–µ –∞–¥–º—ñ–Ω:'),
        sep='\n'
    )

    await state.set_state(CreateSupplierState.title)
    await message.answer(text=text, reply_markup=base_kbs.get_inline_nav_keyboard('supplier'))


STATE_BACK_MAP = {
    CreateSupplierState.title: _handle_create_supplier,
    CreateSupplierState.alias: _handle_contact_answer,
    CreateSupplierState.approve: _handle_alias,
}


@router.message(F.text == suppliers_cmd.SuppliersCommands.create_supplier)
@auth_decorator
async def handle_create_supplier(message: types.Message, state: FSMContext):
    await _handle_create_supplier(message, state)


@router.message(CreateSupplierState.contact)
async def handle_contact(message: types.Message, state: FSMContext):
    if message.contact:
        tg_id = message.contact.user_id
    elif user := await find_user(message.text):
        tg_id = user.id
    else:
        return await message.answer(text='–ù–∞–∂–∞–ª—å, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ –π–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç.')

    if await views.get_supplier(bootstrap.uow, tg_id):
        return await message.answer(text='–î–∞–Ω–∏–π –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫ –≤–∂–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –±–æ—Ç–∞.')

    await state.update_data(contact=tg_id)
    await _handle_contact_answer(message, state)


@router.message(CreateSupplierState.title, F.text)
async def handle_title(message: types.Message, state: FSMContext):
    await _handle_title(message, state)


@router.message(CreateSupplierState.alias, F.text)
async def handle_alias(message: types.Message, state: FSMContext):
    await _handle_alias(message, state)


@router.message(CreateSupplierState.approve, F.text == '–ù–∞–∑–∞–¥ ‚¨Ö')
async def handle_supplier_back(message: types.Message, state: FSMContext):
    await _handle_title(message, state)


@router.message(CreateSupplierState.approve)
@auth_decorator
async def handle_approve(message: types.Message, state: FSMContext, user: User):
    await _handle_approve(message, state, user)


@router.callback_query(base_cbs.BackCallback.filter(F.entity == 'supplier'))
async def handle_back(callback: types.CallbackQuery, state: FSMContext):
    curr_state = await state.get_state()

    prev_handler = STATE_BACK_MAP.get(curr_state)
    await callback.answer()
    await prev_handler(callback.message, state)
